{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "definitions": {
    "Parameter08": {
      "type": "object",
      "oneOf":[
        {"$ref": "#/definitions/StringTypeDeclaration08"},
        {"$ref": "#/definitions/ParameterTypeDeclaration08"},
        {"$ref": "#/definitions/NumberTypeDeclaration08"}
      ]
    },
    "ParameterBase08":{
      "type": "object",
      "properties":{
        "name":{
          "type": "string",
          "description": "name of the parameter"
        },
        "displayName":{
          "type": "string",
          "description": "An alternate, human-friendly name for the parameter"
        },
        "type":{
          "type": "string",
          "description": "The type attribute specifies the primitive type of the parameter's resolved value. API clients MUST return/throw an error if the parameter's resolved value does not match the specified type. If type is not specified, it defaults to string."
        },
        "location":{
          "type": "string",
          "description": "Location of the parameter (can not be edited by user)",
          "enum":["QUERY","HEADERS","URI","FORM","BURI"]
        },
        "required":{
          "type": "boolean",
          "description": "Set to true if parameter is required"
        },
        "default":{
          "type": ["array", "boolean", "integer", "number", "null", "object", "string"],
          "description": "The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
        },
        "example":{
          "type": "string",
          "description": "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
        },
        "repeat":{
          "type": "boolean",
          "description": "The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
        },
        "description":{
          "type": [ "string", "null" ],
          "description": "The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown."
        },
        "__METADATA__": {"type": "object"}
      }
    },
    "StringTypeDeclaration08":{
      "allOf":[
        {"$ref": "#/definitions/ParameterBase08"},
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "string"
              ],
              "description": "Value must be a string"
            },
            "pattern": {
              "type": "string",
              "description": "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
            },
            "enum": {
              "type": "array",
              "description": "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error.",
              "items": {
                "type": "string"
              }
            },
            "minLength": {
              "type": "number",
              "description": "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
            },
            "maxLength": {
              "type": "number",
              "description": "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
            }
          }
        }
      ]
    },
    "ParameterTypeDeclaration08":{
      "allOf":[
        {"$ref": "#/definitions/ParameterBase08"},
        {
          "properties":{
            "type": {
              "type": "string",
              "description": "Value must be a boolean or date or file",
              "enum":["boolean", "date", "file"]
            }
          }
        }
      ]
    },
    "NumberTypeDeclaration08":{
      "allOf":[
        {"$ref": "#/definitions/ParameterBase08"},
        {
          "properties":{
            "type": {
              "type": "string",
              "description": "Value MUST be a number or integer. Indicate floating point numbers as defined by YAML.",
              "enum":["number", "integer"]
            },
            "minimum": {
              "type": "number",
              "description": "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
            },
            "maximum": {
              "type": "number",
              "description": "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
            }
          }
        }
      ]
    }
  }
}