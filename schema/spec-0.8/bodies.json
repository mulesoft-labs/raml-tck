{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "definitions": {
    "Response08":{
      "description": "Resource methods MAY have one or more responses. Responses MAY be described using the description property, and MAY include example attributes or schema properties.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/HasSource"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Responses MUST be a map of one or more HTTP status codes, where each status code itself is a map that describes that status code."
            },
            "headers": {
              "type": "array",
              "description": "An API's methods may support custom header values in responses. The custom, non-standard HTTP headers MUST be specified by the headers property. API's may include the the placeholder token {?} in a header name to indicate that any number of headers that conform to the specified format can be sent in responses. This is particularly useful for APIs that allow HTTP headers that conform to some naming convention to send arbitrary, custom data.",
              "items": {
                "$ref": "parameters.json#/definitions/Parameter08"
              }
            },
            "body": {
              "type": "array",
              "description": "Each response MAY contain a body property, which conforms to the same structure as request body properties (see Body). Responses that can return more than one response code MAY therefore have multiple bodies defined. For APIs without a priori knowledge of the response types for their responses, `*/*` MAY be used to indicate that responses that do not matching other defined data types MUST be accepted. Processing applications MUST match the most descriptive media type first if `*/*` is used.",
              "items": {
                "$ref": "#/definitions/BodyLike08"
              }
            },
            "description": {
              "type": [
                "string",
                "null"
              ],
              "description": "The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown."
            }
          }
        }
      ]
    },
    "BodyLike08":{
      "description": "Some method verbs expect the resource to be sent as a request body. For example, to create a resource, the request must include the details of the resource to create. Resources CAN have alternate representations. For example, an API might support both JSON and XML representations. A method's body is defined in the body property as a hashmap, in which the key MUST be a valid media type.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/HasSource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Mime type of the request or response body"
            },
            "schema": {
              "type": "string",
              "description": "The structure of a request or response body MAY be further specified by the schema property under the appropriate media type. The schema key CANNOT be specified if a body's media type is application/x-www-form-urlencoded or multipart/form-data. All parsers of RAML MUST be able to interpret JSON Schema and XML Schema. Schema MAY be declared inline or in an external file. However, if the schema is sufficiently large so as to make it difficult for a person to read the API definition, or the schema is reused across multiple APIs or across multiple miles in the same API, the !include user-defined data type SHOULD be used instead of including the content inline. Alternatively, the value of the schema field MAY be the name of a schema specified in the root-level schemas property, or it MAY be declared in an external file and included by using the by using the RAML !include user-defined data type."
            },
            "example": {
              "type": [
                "string",
                "integer",
                "number",
                "boolean"
              ],
              "description": "Documentation generators MUST use body properties' example attributes to generate example invocations."
            },
            "formParameters": {
              "type": "array",
              "description": "Web forms REQUIRE special encoding and custom declaration. If the API's media type is either application/x-www-form-urlencoded or multipart/form-data, the formParameters property MUST specify the name-value pairs that the API is expecting. The formParameters property is a map in which the key is the name of the web form parameter, and the value is itself a map the specifies the web form parameter's attributes.",
              "istems": {
                "$ref": "parameters.json#/definitions/Parameter08"
              }
            },
            "schemaContent": {
              "type": "string",
              "description": "Returns schema content for the cases when schema is inlined, when schema is included, and when "
            },
            "description": {
              "type": [
                "string",
                "null"
              ],
              "description": "Human readable description of the body"
            }
          }
        }
      ]
    }
  }
}